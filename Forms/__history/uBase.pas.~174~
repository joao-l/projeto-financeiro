unit uBase;

{Classe que sera um formulário 'Base' p/ outros formulários}

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, ExtCtrls, ImgList, ActnList, StdCtrls, ComCtrls, Grids, DBGrids, DB,
  Buttons, DBClient, Validar, Mask;

type
  TFrmBase = class(TForm)
    Panel1: TPanel;
    BtnNovo: TButton;
    aclComandos: TActionList;
    ImgAcoes: TImageList;
    ACNovo: TAction;
    ACEditar: TAction;
    ACApagar: TAction;
    ACSair: TAction;
    BtnEditar: TButton;
    BtnApagar: TButton;
    BtnSair: TButton;
    StatusInfo: TStatusBar;
    DBGDados: TDBGrid;
    BtnSalvar: TSpeedButton;
    BtnCancelar: TSpeedButton;
    PNDados: TPanel;
    DS: TDataSource;
    Validar: TValidar;
    GroupBox1: TGroupBox;
    cbBusca: TComboBox;
    edtValor: TEdit;
    procedure ACNovoExecute(Sender: TObject);
    procedure ACEditarExecute(Sender: TObject);
    procedure ACApagarExecute(Sender: TObject);
    procedure ACSairExecute(Sender: TObject);
    procedure BtnSalvarClick(Sender: TObject);
    procedure BtnCancelarClick(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure GetPesquisa;
    procedure edtValorChange(Sender: TObject);
    procedure cbBuscaChange(Sender: TObject);
    procedure DBGDadosDblClick(Sender: TObject);
  private
    { Private declarations }
    procedure Acao(Tipo: String);
  public
    { Public declarations }
  end;

var
  FrmBase: TFrmBase;

implementation

uses uFuncoes;

{$R *.dfm}

{
  Ação padrão p/ todos os formularios 'filhos'.
  Tipos de ação: Salvar, Leitura, Alterar, Deletar e Cancelar
}
procedure TFrmBase.Acao(Tipo: String);
begin

  if Tipo = 'Read' then
  begin
    // Leitura

    // Controle de butões necessarios p/ 'leitura'
    BtnNovo.Enabled := True;
    BtnEditar.Enabled := True;
    BtnApagar.Enabled := True;
    BtnSalvar.Enabled := False;
    BtnCancelar.Enabled := False;
    DBGDados.Enabled := True;
    PNDados.Enabled := False;

    // Função que abre o DataSet, caso o mesmo não esteja ativo
    VerificaDataSet(DS);

    //Traz como um 'rodapé' o número de registros encontrados no formulario
    StatusInfo.Panels[0].Text := ' ' + IntToStr(DS.DataSet.RecordCount) + ' Registros cadastrado';
  end;

  if Tipo = 'New' then
  begin
    // Novo

    // Controle de butões necessarios p/ 'Novo'
    DS.DataSet.Insert;
    BtnNovo.Enabled := False;
    BtnEditar.Enabled := False;
    BtnApagar.Enabled := False;
    BtnSalvar.Enabled := True;
    BtnCancelar.Enabled := True;
    DBGDados.Enabled := False;
    PNDados.Enabled := True;
  end;

  if Tipo = 'Edit' then
  begin

    // Verificando se à algum registro no DataSet
    if not DS.DataSet.IsEmpty then
    begin
      DS.DataSet.Edit;

      // Controle de butões necessarios p/ 'Edit'
      BtnNovo.Enabled := False;
      BtnEditar.Enabled := False;
      BtnApagar.Enabled := False;
      BtnSalvar.Enabled := True;
      BtnCancelar.Enabled := True;
      DBGDados.Enabled := False;
      PNDados.Enabled := True;
    end;
  end;

  if Tipo = 'Delete' then
  begin

    // Verificando se à algo a ser deletado
    if not DS.DataSet.IsEmpty then
    begin

      // Verificação de Exclusão
      if Application.MessageBox('Deseja apagar este registro?', 'Exclusão',MB_ICONQUESTION + MB_YESNO + MB_DEFBUTTON1) = ID_YES then
      begin
        try
          DS.DataSet.Delete;
          //Cast do DataSet
          (DS.DataSet as TClientDataSet).ApplyUpdates(0);

          Application.MessageBox('Regsitro deletado com sucesso!', 'Exclusão',MB_ICONINFORMATION + MB_OK);

          //Habilitando campos para modo leitura
          Acao('Read');
        Except
          Application.MessageBox('Erro ao excluir!', 'Exclusão',MB_ICONERROR + MB_OK);
        end;
      end;
    end;
  end;

  if Tipo = 'Save' then
  begin
    if Validar.Validar then
    begin
      BtnNovo.Enabled := True;
      BtnEditar.Enabled := True;
      BtnApagar.Enabled := True;
      BtnSalvar.Enabled := False;
      BtnCancelar.Enabled := False;
      DBGDados.Enabled := True;
      PNDados.Enabled := False;

      if DS.DataSet.State in [dsInsert] then
      begin
        try
          if DS.DataSet.FieldByName('DTCRIACAO').IsNull then
          begin
            DS.DataSet.FieldByName('DTCRIACAO').Value := Now;
          end;

          DS.DataSet.Post;
          (DS.DataSet as TClientDataSet).ApplyUpdates(0);
          Application.MessageBox('Registro cadastrado com sucesso!','Cadastro', MB_ICONINFORMATION + MB_OK);
        except
          Application.MessageBox('Erro ao cadastrar!', 'Erro',MB_ICONERROR + MB_OK);
        end;
      end
      else
        try
          DS.DataSet.Post;
          (DS.DataSet as TClientDataSet).ApplyUpdates(0);
          Application.MessageBox('Registro editado com sucesso!', 'Cadastro',MB_ICONINFORMATION + MB_OK);
        except
          Application.MessageBox('Erro ao editar!', 'Erro',MB_ICONERROR + MB_OK);
        end;
    end;
  end;

  if Tipo = 'Cancel' then
  begin
    (DS.DataSet as TClientDataSet).CancelUpdates;
    Acao('Read');
  end;

end;

procedure TFrmBase.ACApagarExecute(Sender: TObject);
begin
  Acao('Delete');
end;

procedure TFrmBase.ACEditarExecute(Sender: TObject);
begin
  Acao('Edit');
end;

procedure TFrmBase.ACNovoExecute(Sender: TObject);
begin
  Acao('New');
end;

procedure TFrmBase.ACSairExecute(Sender: TObject);
begin
  Close;
end;

procedure TFrmBase.BtnCancelarClick(Sender: TObject);
begin
  Acao('Cancel');
end;

procedure TFrmBase.BtnSalvarClick(Sender: TObject);
begin
  Acao('Save');
end;

procedure TFrmBase.cbBuscaChange(Sender: TObject);
begin
  edtValor.Text := '';
  edtValor.SetFocus;
end;

procedure TFrmBase.DBGDadosDblClick(Sender: TObject);
begin
  Acao('Edit');
end;

procedure TFrmBase.edtValorChange(Sender: TObject);
var
  Position : Integer;
begin
  Position := Integer(cbBusca.Items.Objects[cbBusca.ItemIndex]);
  Pesquisa(DS, DS.DataSet.Fields[Position].FieldName, edtValor.Text);
end;

procedure TFrmBase.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  FechaDataSet(DS);
end;

procedure TFrmBase.FormShow(Sender: TObject);
begin
  Acao('Read');
  GetPesquisa;
end;

procedure TFrmBase.GetPesquisa;
var
  I: Integer;
begin

  for I := 0 to DS.DataSet.Fields.Count - 1 do
    if (DS.DataSet.Fields[I].DataType in [ftString]) or (DS.DataSet.Fields[I].DataType in [ftFMTBcd]) then
    begin
      if DS.DataSet.Fields[I].DisplayName <> 'Títular' then
        cbBusca.Items.AddObject(DS.DataSet.Fields[I].DisplayName, TObject(I));
    end;

  cbBusca.ItemIndex := 0;

end;

end.
