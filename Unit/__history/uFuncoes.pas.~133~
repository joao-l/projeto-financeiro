unit uFuncoes;

interface

uses
  DB, StdCtrls, Classes, Mask;

procedure VerificaDataSet(DataSet: TDataSource);
procedure FechaDataSet(DataSet: TDataSource);
procedure Pesquisa(DS: TDataSource; Field: string; Value: string);
procedure PesquisaPorDataCriacao(DS: TDataSource; Field: string; DTInicial, DTFinal: string);
procedure LoadListPessoas(ComboBox: TComboBox);
procedure LimparPesquisas(DS: TDataSource);
procedure LimparCamposPeriodo(dtInicial, dtFinal: TMaskEdit; Value: TEdit);
function calcularJuros(JurosSugerido, ValorTitulo, qtdDiasEmAtraso : Double): Double;
function retornaDiasEmAtraso(DtPagamento, DtVencimento: TDate): Integer;

implementation

uses
  SysUtils, DBXCommon, Forms, Windows, DateUtils;

procedure VerificaDataSet(DataSet: TDataSource);
begin

  if not DataSet.DataSet.Active then
  begin
    DataSet.DataSet.Open;
  end;

end;

procedure FechaDataSet(DataSet: TDataSource);
begin
  DataSet.DataSet.Close;
end;

procedure Pesquisa(DS: TDataSource; Field: string; Value: string);
begin

  if DS.DataSet.FieldByName(Field).DataType in [ftFMTBcd] then
  begin
    if String(Value) <> '' then
    begin
      DS.DataSet.Filter := Field + ' = ' + Value;
      DS.DataSet.Filtered := True;
    end;
  end
  else if DS.DataSet.FieldByName(Field).DataType in [ftString] then
  begin
    DS.DataSet.Filter := '' + Field + ' like ' + QuotedStr('%' + Value + '%');
    DS.DataSet.Filtered := True;
  end;

end;

procedure PesquisaPorDataCriacao(DS: TDataSource; Field: string; DTInicial, DTFinal: string);
var
  Inicio, Fim: TStrings;
begin

  if (DTInicial = '  /  /    ') or (DTFinal = '  /  /    ') then
    Application.MessageBox('Data inválida !', 'Erro',MB_ICONERROR + MB_OK)
  else
    DS.DataSet.Filter := '(DTCRIACAO >= (''' + DTInicial + ''')) AND (DTCRIACAO <= (''' + DTFinal + '''))';
    DS.DataSet.Filtered := True;

end;

procedure LoadListPessoas(ComboBox: TComboBox);
var
  Con : TDBXConnection;
  Cmd : TDBXCommand;
  Reader : TDBXReader;
begin

  Con := TDBXConnectionFactory.GetConnectionFactory.GetConnection('APPFINAN', 'root', 'root');
  Cmd := Con.CreateCommand;
  Cmd.Text := 'SELECT * FROM PESSOAS';

  Reader := Cmd.ExecuteQuery;
  while Reader.Next do
    ComboBox.Items.Add(Reader.Value[1].GetAnsiString);

end;

procedure LimparPesquisas(DS: TDataSource);
begin
  DS.DataSet.Filtered := False;
end;

procedure LimparCamposPeriodo(dtInicial, dtFinal: TMaskEdit; Value: TEdit);
begin
  dtInicial.Text := '';
  dtFinal.Text := '';
  Value.Text := '';
end;

function calcularJuros(JurosSugerido, ValorTitulo, qtdDiasEmAtraso : Double): Double;
begin
  Result := (((JurosSugerido/100) * ValorTitulo) / 30 ) * qtdDiasEmAtraso;
end;

function retornaDiasEmAtraso(DtPagamento, DtVencimento: TDate): Integer;
var
  Dias:Integer;
  DtVenc,DtAtual:TDate;
begin
  DtVenc := DtVencimento;
  DtAtual := DtPagamento;
  Dias := DaysBetween(DtVenc, DtAtual);
  Result := Dias;
end;

end.
